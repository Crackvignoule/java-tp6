/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tp6;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.lang.reflect.Field;
import java.sql.SQLException;

class AppTest {
    private Club club;
    private EntityManagerImpl em;

    @BeforeEach
    public void setUp() throws Exception {
        club = new Club();
        club.setFabricant("Adidos");
        club.setPoids(10.3);
        
        em = new EntityManagerImpl();
        em.persist(club);
    }

    @Test
    public void testPersistence() {
    assertNotNull(club.getId(), "Club should have an ID after persist");
}

    @Test
    public void testFind() throws SQLException {
    Club trouve = em.<Club> find(Club.class, club.getId());
    assertEquals(club.getFabricant(), trouve.getFabricant());
}

    @Test
    public void testMerge() throws SQLException {
    club.setFabricant("Pouet");
    club.setPoids(21.3);
    em.merge(club);
    
    // Fetch the updated club from the database
    Club updatedClub = em.<Club> find(Club.class, club.getId());

    // Verify that the fabricant field was updated
    assertEquals("Pouet", updatedClub.getFabricant(), "Fabricant field should be updated");
    
    try {
        // Access the version field using reflection
        Field versionField = updatedClub.getClass().getDeclaredField("version");
        versionField.setAccessible(true);
        int version = (int) versionField.get(updatedClub);
        
        // Verify that version was incremented
        assertEquals(1, version, "Version field should be incremented");
    } catch (NoSuchFieldException | IllegalAccessException e) {
        e.printStackTrace();
    }
}

    @Test
    public void shouldReturnNullWhenFindingNonExistentClub() throws SQLException {
    Club trouve = em.<Club> find(Club.class, 9999);
    assertNull(trouve, "Should return null when finding a club with non-existent id");
    }
}
// Author : Killian PAVY
package tp6;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import javax.persistence.EntityGraph;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.FlushModeType;
import javax.persistence.LockModeType;
import javax.persistence.Query;
import javax.persistence.StoredProcedureQuery;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaDelete;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.CriteriaUpdate;
import javax.persistence.metamodel.Metamodel;

// TODO Change all references to Club and its fields so that they are generic and can be used for any entity
// TODO Clean the code, ex: create functions to simplify code especially for the reflection parts
// NOTE: I tried to use abstract to avoid implementing all the methods but it did not work because we need to instanciate the class in the tests

public class EntityManagerImpl implements EntityManager {
    
public void persist(Object entity) {
    try {
        // Create the table if it does not exist
        String class_name = entity.getClass().getSimpleName();
        Connection connection = DriverManager.getConnection("jdbc:hsqldb:mem:mymemdb", "SA", "");
        PreparedStatement statement = connection.prepareStatement("CREATE TABLE IF NOT EXISTS " + class_name + " (id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, version INT, fabricant VARCHAR(255), poids DOUBLE)");
        
        statement.executeUpdate();

        Club club = (Club) entity;
        connection = DriverManager.getConnection("jdbc:hsqldb:mem:mymemdb", "SA", "");
        statement = connection.prepareStatement("INSERT INTO " + class_name + " (version, fabricant, poids) VALUES (?, ?, ?)", PreparedStatement.RETURN_GENERATED_KEYS);
        
        statement.setInt(1, 1);
        statement.setString(2, club.getFabricant());
        statement.setDouble(3, club.getPoids());
        
        statement.executeUpdate();

        try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
            if (generatedKeys.next()) {
                try {
                    Field idField = club.getClass().getDeclaredField("id");
                    idField.setAccessible(true);
                    idField.set(club, generatedKeys.getLong(1));
                } catch (NoSuchFieldException | IllegalAccessException e) {
                    e.printStackTrace();
                }
            }
            else {
                throw new SQLException("Creating user failed, no ID obtained.");
            }
        }

    } catch (SQLException e) {
        throw new RuntimeException(e);
    }
}

public <T> T merge(T entity) {
    try {
        String class_name = entity.getClass().getSimpleName();
        Connection connection = DriverManager.getConnection("jdbc:hsqldb:mem:mymemdb", "SA", "");
        PreparedStatement statement = connection.prepareStatement("UPDATE " + class_name + " SET version = ?, poids = ?, fabricant = ? WHERE id = ?");
        
        setPreparedStatementField(statement, entity, "version", 1);
        setPreparedStatementField(statement, entity, "poids", 2);
        setPreparedStatementField(statement, entity, "fabricant", 3);
        setPreparedStatementField(statement, entity, "id", 4);

        statement.executeUpdate();

        return entity;
    } catch (SQLException | NoSuchFieldException | IllegalAccessException e) {
        throw new RuntimeException(e);
    }
}

public <T> T find(Class<T> entityClass, Object primaryKey) {
    try {
        String class_name = entityClass.getSimpleName();
        Connection connection = DriverManager.getConnection("jdbc:hsqldb:mem:mymemdb", "SA", "");
        PreparedStatement statement = connection.prepareStatement("SELECT * FROM " + class_name + " WHERE id = ?");
        statement.setObject(1, primaryKey);
        Club club = null;

        ResultSet resultSet = statement.executeQuery();
        if (resultSet.next()) {
            club = new Club();

            Field versionField = club.getClass().getDeclaredField("version");
            versionField.setAccessible(true);
            versionField.set(club, resultSet.getInt("version"));
            
            try {
                    Field idField = club.getClass().getDeclaredField("id");
                    idField.setAccessible(true);
                    idField.set(club, resultSet.getLong("id"));
                } catch (NoSuchFieldException | IllegalAccessException e) {
                    e.printStackTrace();
                }
            club.setFabricant(resultSet.getString("fabricant"));
            club.setPoids(resultSet.getDouble("poids"));
        }
        return (T) club;
        
    } catch (SQLException | NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException e) {
        throw new RuntimeException(e);
    }
}

private void setPreparedStatementField(PreparedStatement statement, Object entity, String fieldName, int index) throws NoSuchFieldException, IllegalAccessException, SQLException {
    Field field = entity.getClass().getDeclaredField(fieldName);
    field.setAccessible(true);

    // if fieldname == version, increment version
    if (fieldName.equals("version")) {
        int version = (int) field.get(entity) + 1;
        field.set(entity, version);
    }

    statement.setObject(index, field.get(entity));
}

@Override
public void remove(Object entity) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'remove'");
}

@Override
public <T> T find(Class<T> entityClass, Object primaryKey, Map<String, Object> properties) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'find'");
}

@Override
public <T> T find(Class<T> entityClass, Object primaryKey, LockModeType lockMode) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'find'");
}

@Override
public <T> T find(Class<T> entityClass, Object primaryKey, LockModeType lockMode, Map<String, Object> properties) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'find'");
}

@Override
public <T> T getReference(Class<T> entityClass, Object primaryKey) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'getReference'");
}

@Override
public void flush() {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'flush'");
}

@Override
public void setFlushMode(FlushModeType flushMode) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'setFlushMode'");
}

@Override
public FlushModeType getFlushMode() {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'getFlushMode'");
}

@Override
public void lock(Object entity, LockModeType lockMode) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'lock'");
}

@Override
public void lock(Object entity, LockModeType lockMode, Map<String, Object> properties) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'lock'");
}

@Override
public void refresh(Object entity) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'refresh'");
}

@Override
public void refresh(Object entity, Map<String, Object> properties) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'refresh'");
}

@Override
public void refresh(Object entity, LockModeType lockMode) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'refresh'");
}

@Override
public void refresh(Object entity, LockModeType lockMode, Map<String, Object> properties) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'refresh'");
}

@Override
public void clear() {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'clear'");
}

@Override
public void detach(Object entity) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'detach'");
}

@Override
public boolean contains(Object entity) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'contains'");
}

@Override
public LockModeType getLockMode(Object entity) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'getLockMode'");
}

@Override
public void setProperty(String propertyName, Object value) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'setProperty'");
}

@Override
public Map<String, Object> getProperties() {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'getProperties'");
}

@Override
public Query createQuery(String qlString) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'createQuery'");
}

@Override
public <T> TypedQuery<T> createQuery(CriteriaQuery<T> criteriaQuery) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'createQuery'");
}

@Override
public Query createQuery(CriteriaUpdate updateQuery) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'createQuery'");
}

@Override
public Query createQuery(CriteriaDelete deleteQuery) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'createQuery'");
}

@Override
public <T> TypedQuery<T> createQuery(String qlString, Class<T> resultClass) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'createQuery'");
}

@Override
public Query createNamedQuery(String name) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'createNamedQuery'");
}

@Override
public <T> TypedQuery<T> createNamedQuery(String name, Class<T> resultClass) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'createNamedQuery'");
}

@Override
public Query createNativeQuery(String sqlString) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'createNativeQuery'");
}

@Override
public Query createNativeQuery(String sqlString, Class resultClass) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'createNativeQuery'");
}

@Override
public Query createNativeQuery(String sqlString, String resultSetMapping) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'createNativeQuery'");
}

@Override
public StoredProcedureQuery createNamedStoredProcedureQuery(String name) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'createNamedStoredProcedureQuery'");
}

@Override
public StoredProcedureQuery createStoredProcedureQuery(String procedureName) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'createStoredProcedureQuery'");
}

@Override
public StoredProcedureQuery createStoredProcedureQuery(String procedureName, Class... resultClasses) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'createStoredProcedureQuery'");
}

@Override
public StoredProcedureQuery createStoredProcedureQuery(String procedureName, String... resultSetMappings) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'createStoredProcedureQuery'");
}

@Override
public void joinTransaction() {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'joinTransaction'");
}

@Override
public boolean isJoinedToTransaction() {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'isJoinedToTransaction'");
}

@Override
public <T> T unwrap(Class<T> cls) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'unwrap'");
}

@Override
public Object getDelegate() {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'getDelegate'");
}

@Override
public void close() {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'close'");
}

@Override
public boolean isOpen() {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'isOpen'");
}

@Override
public EntityTransaction getTransaction() {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'getTransaction'");
}

@Override
public EntityManagerFactory getEntityManagerFactory() {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'getEntityManagerFactory'");
}

@Override
public CriteriaBuilder getCriteriaBuilder() {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'getCriteriaBuilder'");
}

@Override
public Metamodel getMetamodel() {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'getMetamodel'");
}

@Override
public <T> EntityGraph<T> createEntityGraph(Class<T> rootType) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'createEntityGraph'");
}

@Override
public EntityGraph<?> createEntityGraph(String graphName) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'createEntityGraph'");
}

@Override
public EntityGraph<?> getEntityGraph(String graphName) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'getEntityGraph'");
}

@Override
public <T> List<EntityGraph<? super T>> getEntityGraphs(Class<T> entityClass) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'getEntityGraphs'");
}

}